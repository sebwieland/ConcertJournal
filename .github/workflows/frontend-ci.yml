name: Frontend CI/CD

on:
  workflow_call:

env:
  # Enable BuildKit for faster Docker builds
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  frontend-build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
            ~/.cache/Cypress
            ~/.cache/yarn
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm install --prefer-offline --no-audit

      - name: Lint code
        run: |
          cd frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx --cache || echo "Linting issues found, but continuing"

      - name: Run security scan
        run: |
          cd frontend
          npm audit --production || echo "Security issues found, but continuing"

      - name: Run tests
        run: |
          cd frontend
          npm test -- --run

      - name: Build React app
        run: |
          cd frontend
          NODE_ENV=production VITE_ENSURE_COMPONENTS=true npm run build

      - name: Validate build
        run: |
          cd frontend
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Build directory is empty or does not exist!"
            exit 1
          fi

  frontend-publish:
    name: Build Image
    runs-on: ubuntu-latest
    needs: [frontend-build]
    if: github.event_name != 'pull_request'
    outputs:
      image_built: ${{ steps.build_image.outputs.success }}
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm install --prefer-offline --no-audit

      - name: Build React app
        run: |
          cd frontend
          NODE_ENV=production VITE_ENSURE_COMPONENTS=true npm run build

      - name: Build Docker image
        id: build_image
        uses: docker/build-push-action@v6
        with:
          context: frontend
          push: false
          load: true
          tags: |
            concertjournalfrontend:build
            concertjournalfrontend:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=registry.wielandseb.synology.me/concertjournalfrontend:cache
          # Add BuildKit optimizations
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            
      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save concertjournalfrontend:build | gzip > frontend-image.tar.gz
          echo "Image saved as frontend-image.tar.gz"
          echo "success=true" >> $GITHUB_OUTPUT
          
      - name: Upload image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar.gz
          retention-days: 1

      - name: Scan Docker image
        if: github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: concertjournalfrontend:build
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'