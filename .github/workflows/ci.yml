name: Monorepo CI/CD

on:
  push:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-test:
    name: Backend - Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [ 21 ]
        os: [ubuntu-latest, macos-latest]
    if: |
      github.event_name == 'pull_request' ||
      contains(github.event.pull_request.changed_files, 'backend') ||
      contains(github.event.commits[0].modified, 'backend') ||
      (github.event_name == 'push' && contains(github.event.commits[0].modified, 'backend')) ||
      github.event_name == 'workflow_dispatch'
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Print Java version
        run: |
          cd backend
          mvn --version

      - name: Build and run unit tests
        run: |
          cd backend
          mvn clean test

      - name: Create coverage report
        run: |
          cd backend
          mvn jacoco:report

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.java }}-${{ matrix.os }}
          path: backend/target/site/jacoco/*
          retention-days: 7

  backend-build:
    name: Backend - Build and Publish
    runs-on: ubuntu-latest
    needs: backend-test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: backend

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: 'maven'

      - name: Print Java version
        run: |
          cd backend
          mvn --version

      - name: Build project
        run: |
          cd backend
          mvn clean package -Dmaven.test.skip=true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: https://registry.wielandseb.synology.me/concertjournalbackend
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine latest tag
        id: get_latest_tag
        run: |
          cd backend
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          latest_tag="${{ env.latest_tag }}"
          if [[ $latest_tag =~ ^v([0-9]+)$ ]]; then
            version_number=${BASH_REMATCH[1]}
            new_version_number=$((version_number + 1))
            new_version="v$new_version_number"
          else
            new_version="v1"  # Default to v1 if no valid tag is found
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          tags: |
            registry.wielandseb.synology.me/concertjournalbackend:${{ env.new_version }}
            registry.wielandseb.synology.me/concertjournalbackend:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=registry.wielandseb.synology.me/concertjournalbackend:cache
          cache-to: type=registry,ref=registry.wielandseb.synology.me/concertjournalbackend:cache,mode=max

      - name: Tag new version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

  frontend-build:
    name: Frontend - Build and Publish
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      contains(github.event.pull_request.changed_files, 'frontend') ||
      contains(github.event.commits[0].modified, 'frontend') ||
      (github.event_name == 'push' && contains(github.event.commits[0].modified, 'frontend')) ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Lint code
        run: |
          cd frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx || echo "Linting issues found, but continuing"

      - name: Run security scan
        run: |
          cd frontend
          npm audit --production || echo "Security issues found, but continuing"

      - name: Run tests
        run: |
          cd frontend
          npm test

      - name: Build React app
        run: |
          cd frontend
          npm run build

      - name: Validate build
        run: |
          cd frontend
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Build directory is empty or does not exist!"
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          registry: https://registry.wielandseb.synology.me/concertjournalfrontend
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine latest tag
        if: github.ref == 'refs/heads/main'
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l 'v*' | sort -rV | head -n 1 || echo "v0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        if: github.ref == 'refs/heads/main'
        id: increment_version
        run: |
          latest_tag="${{ env.latest_tag }}"
          if [[ $latest_tag =~ ^v([0-9]+)$ ]]; then
            version_number=${BASH_REMATCH[1]}
            new_version_number=$((version_number + 1))
            new_version="v$new_version_number"
          else
            new_version="v1"  # Default to v1 if no valid tag is found
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: frontend
          push: true
          tags: |
            registry.wielandseb.synology.me/concertjournalfrontend:${{ env.new_version }}
            registry.wielandseb.synology.me/concertjournalfrontend:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=registry.wielandseb.synology.me/concertjournalfrontend:cache
          cache-to: type=registry,ref=registry.wielandseb.synology.me/concertjournalfrontend:cache,mode=max

      - name: Scan Docker image
        if: github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: registry.wielandseb.synology.me/concertjournalfrontend:${{ env.new_version }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Tag new version
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}