name: Global CI/CD Orchestrator

on:
  push:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_full_build:
        description: 'Force rebuild of all components'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  changes:
    name: Detect Changes
    uses: ./.github/workflows/change-detection.yml

  trigger-backend:
    name: Backend
    needs: [changes]
    if: |
      needs.changes.outputs.backend == 'true' ||
      github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.inputs.force_full_build == 'true'
    uses: ./.github/workflows/backend-ci.yml
    secrets:
      inherit

  trigger-frontend:
    name: Frontend
    needs: [changes]
    if: |
      needs.changes.outputs.frontend == 'true' ||
      github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.inputs.force_full_build == 'true'
    uses: ./.github/workflows/frontend-ci.yml
    secrets:
      inherit

  publish-artifacts:
    name: Publish Images and Tag
    runs-on: ubuntu-latest
    needs: [changes, trigger-backend, trigger-frontend]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name != 'pull_request' &&
      needs.trigger-backend.result == 'success' &&
      needs.trigger-frontend.result == 'success'
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.generate-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate version
        id: generate-version
        uses: ./.github/workflows/reusable/version-tagging.yml
        with:
          push_tag: false
      
      - name: Login to Docker registries
        uses: docker/login-action@v3
        with:
          registry: https://registry.wielandseb.synology.me
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}
      
      - name: Download frontend image
        if: needs.changes.outputs.frontend == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: ./images
      
      - name: Download backend image
        if: needs.changes.outputs.backend == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: ./images
      
      - name: Prepare Docker images
        run: |
          mkdir -p ./images
          
          # Handle frontend image
          if [[ "${{ needs.changes.outputs.frontend }}" == "true" || "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "Loading built frontend image from artifact..."
            docker load < ./images/frontend-image.tar.gz
          else
            echo "Checking for existing frontend image in registry..."
            if docker pull registry.wielandseb.synology.me/concertjournalfrontend:latest; then
              echo "Using latest frontend image from registry"
              docker tag registry.wielandseb.synology.me/concertjournalfrontend:latest concertjournalfrontend:build
            else
              echo "No existing frontend image found. This might be the first run."
              echo "ERROR: Cannot proceed without a frontend image. Please run a full build first." >&2
              exit 1
            fi
          fi
          
          # Handle backend image
          if [[ "${{ needs.changes.outputs.backend }}" == "true" || "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "Loading built backend image from artifact..."
            docker load < ./images/backend-image.tar.gz
          else
            echo "Checking for existing backend image in registry..."
            if docker pull registry.wielandseb.synology.me/concertjournalbackend:latest; then
              echo "Using latest backend image from registry"
              docker tag registry.wielandseb.synology.me/concertjournalbackend:latest concertjournalbackend:build
            else
              echo "No existing backend image found. This might be the first run."
              echo "ERROR: Cannot proceed without a backend image. Please run a full build first." >&2
              exit 1
            fi
          fi
          
          docker images
      
      - name: Tag and push frontend image
        run: |
          docker tag concertjournalfrontend:build registry.wielandseb.synology.me/concertjournalfrontend:${{ steps.generate-version.outputs.new_version }}
          docker tag concertjournalfrontend:build registry.wielandseb.synology.me/concertjournalfrontend:latest
          docker push registry.wielandseb.synology.me/concertjournalfrontend:${{ steps.generate-version.outputs.new_version }}
          docker push registry.wielandseb.synology.me/concertjournalfrontend:latest
      
      - name: Tag and push backend image
        run: |
          docker tag concertjournalbackend:build registry.wielandseb.synology.me/concertjournalbackend:${{ steps.generate-version.outputs.new_version }}
          docker tag concertjournalbackend:build registry.wielandseb.synology.me/concertjournalbackend:latest
          docker push registry.wielandseb.synology.me/concertjournalbackend:${{ steps.generate-version.outputs.new_version }}
          docker push registry.wielandseb.synology.me/concertjournalbackend:latest
      
      - name: Push version tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.generate-version.outputs.new_version }}
          git push origin ${{ steps.generate-version.outputs.new_version }}
          echo "Successfully pushed tag ${{ steps.generate-version.outputs.new_version }}"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, trigger-backend, trigger-frontend, publish-artifacts]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "# CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Components Processed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "- 🔄 Full rebuild forced via workflow dispatch" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.changes.outputs.backend }}" == "true" || "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "- ✅ Backend rebuilt" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No backend changes detected (reused latest image)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.changes.outputs.frontend }}" == "true" || "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "- ✅ Frontend rebuilt" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ No frontend changes detected (reused latest image)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.trigger-backend.result }}" == "success" || "${{ needs.trigger-backend.result }}" == "skipped" ]]; then
            echo "- ✅ Backend workflow: ${{ needs.trigger-backend.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Backend workflow: ${{ needs.trigger-backend.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.trigger-frontend.result }}" == "success" || "${{ needs.trigger-frontend.result }}" == "skipped" ]]; then
            echo "- ✅ Frontend workflow: ${{ needs.trigger-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Frontend workflow: ${{ needs.trigger-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" != "pull_request" ]]; then
            if [[ "${{ needs.publish-artifacts.result }}" == "success" ]]; then
              echo "- ✅ Version tag and images pushed: ${{ needs.publish-artifacts.outputs.version }}" >> $GITHUB_STEP_SUMMARY
              echo "  - Using optimized monorepo strategy (only changed components rebuilt)" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.publish-artifacts.result }}" == "skipped" ]]; then
              echo "- ⚠️ Version tag and images not pushed (workflow skipped)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ Version tag and images push failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi